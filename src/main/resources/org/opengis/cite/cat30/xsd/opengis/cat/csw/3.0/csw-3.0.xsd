<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema elementFormDefault="qualified" version="3.0" id="csw-3.0-rc1"
  targetNamespace="http://www.opengis.net/cat/csw/3.0" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:csw30="http://www.opengis.net/cat/csw/3.0" 
  xmlns:fes="http://www.opengis.net/fes/2.0"
  xmlns:ows="http://www.opengis.net/ows/2.0" 
  xmlns:gml="http://www.opengis.net/gml/3.2"
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:dct="http://purl.org/dc/terms/">

  <xsd:import namespace="http://www.opengis.net/ows/2.0"
    schemaLocation="http://schemas.opengis.net/ows/2.0/owsAll.xsd"/>
  <xsd:import namespace="http://www.opengis.net/fes/2.0"
    schemaLocation="http://schemas.opengis.net/filter/2.0/filterAll.xsd"/>
  <xsd:import namespace="http://www.opengis.net/gml/3.2"
    schemaLocation="http://schemas.opengis.net/gml/3.2.1/gml.xsd"/>
  <xsd:import namespace="http://purl.org/dc/terms/" />
  <xsd:import namespace="http://purl.org/dc/elements/1.1/" />

  <!-- cswCommon.xsd -->
  <xsd:complexType name="RequestBaseType" abstract="true" id="RequestBaseType">
    <xsd:annotation>
      <xsd:documentation> Base type for all request messages except GetCapabilities. The attributes
        identify the relevant service type and version. </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="service" type="ows:ServiceType" use="optional" default="CSW"/>
    <xsd:attribute name="version" type="ows:VersionType" use="optional" default="3.0.0"/>
  </xsd:complexType>
  <xsd:element name="Acknowledgement" type="csw30:AcknowledgementType" id="Acknowledgement"/>
  <xsd:complexType name="AcknowledgementType" id="AcknowledgementType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> This is a general acknowledgement response message for all
        requests that may be processed in an asynchronous manner. EchoedRequest - Echoes the
        submitted request message RequestId - identifier for polling purposes (if no response
        handler is available, or the URL scheme is unsupported) </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="EchoedRequest" type="csw30:EchoedRequestType"/>
      <xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="timeStamp" type="xsd:dateTime" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="EchoedRequestType" id="EchoedRequestType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Includes a copy of the request message body.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:any namespace="##any" processContents="lax"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- cswGetCapabilities.xsd -->
  <xsd:element name="GetCapabilities" type="csw30:GetCapabilitiesType" id="GetCapabilities"/>
  <xsd:complexType name="GetCapabilitiesType" id="GetCapabilitiesType">
    <xsd:annotation>
      <xsd:documentation> Request for a description of service capabilities. See OGC 06-121r9 for
        more information. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ows:GetCapabilitiesType">
        <xsd:attribute name="service" type="ows:ServiceType" use="optional" default="CSW">
          <xsd:annotation>
            <xsd:documentation> OGC service type identifier (CSW). </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Capabilities" type="csw30:CapabilitiesType" id="Capabilities"/>
  <xsd:complexType name="CapabilitiesType" id="CapabilitiesType">
    <xsd:annotation>
      <xsd:documentation> This type extends ows:CapabilitiesBaseType defined in OGC 06-121r9 to
        include information about supported OGC filter components. A profile may extend this type to
        describe additional capabilities. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="ows:CapabilitiesBaseType">
        <xsd:sequence>
          <xsd:annotation>
            <xsd:documentation> If sections parameter not specified, then Filter_Capabilities is
              mandatory. On full getCapabilities request, then all capabilities should be present.
              Document this in the specification, use annotation on minOccurs to make this point.
            </xsd:documentation>
          </xsd:annotation>
          <xsd:element ref="fes:Filter_Capabilities" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- cswGetDomain.xsd -->
  <xsd:element name="GetDomain" type="csw30:GetDomainType" id="GetDomain"/>
  <xsd:complexType name="GetDomainType" id="GetDomainType">
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence maxOccurs="unbounded">
          <xsd:choice>
            <xsd:sequence>
              <xsd:element name="ValueReference">
                <xsd:complexType>
                  <xsd:simpleContent>
                    <xsd:extension base="xsd:string">
                      <xsd:attribute name="resultType" type="csw30:ResultTypeType" use="optional"
                        default="available"/>
                    </xsd:extension>
                  </xsd:simpleContent>
                </xsd:complexType>
              </xsd:element>
              <xsd:element ref="fes:Filter" minOccurs="0"/>
            </xsd:sequence>
            <xsd:element name="ParameterName" type="xsd:string"/>
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="ResultTypeType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="possible">
        <xsd:annotation>
          <xsd:documentation> Returns the set of supported possible values for the specified data
            component. </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="available">
        <xsd:annotation>
          <xsd:documentation> Returns the set of available values for the specified data component.
            This is typically a subset of the list of possible values. </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:element name="GetDomainResponse" type="csw30:GetDomainResponseType" id="GetDomainResponse"/>
  <xsd:complexType name="GetDomainResponseType" id="GetDomainResponseType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Returns the actual values for some property. In general this
        is a subset of the value domain (that is, set of permissible values), although in some cases
        these may be the same. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="DomainValues" type="csw30:DomainValuesType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="DomainValuesType" id="DomainValuesType">
    <xsd:sequence>
      <xsd:choice>
        <xsd:element name="ValueReference" type="xsd:string"/>
        <xsd:element name="ParameterName" type="xsd:anyURI"/>
      </xsd:choice>
      <xsd:choice minOccurs="0">
        <xsd:element name="ListOfValues" type="csw30:ListOfValuesType"/>
        <xsd:element name="ConceptualScheme" type="csw30:ConceptualSchemeType" maxOccurs="unbounded"/>
        <xsd:element name="RangeOfValues" type="csw30:RangeOfValuesType"/>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="type" type="xsd:QName" use="required"/>
    <xsd:attribute name="resultType" type="csw30:ResultTypeType" use="required"/>

  </xsd:complexType>
  <xsd:complexType name="ListOfValuesType" id="ListOfValuesType">
    <xsd:sequence>
      <xsd:element name="Value" maxOccurs="unbounded">
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="xsd:anyType">
              <xsd:attribute name="isDefault" type="xsd:boolean" use="optional" default="false"/>
              <xsd:attribute name="count" type="xsd:nonNegativeInteger" use="optional"/>
              <xsd:attribute name="uom" type="gml:UomIdentifier" use="optional"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ConceptualSchemeType" id="ConceptualSchemeType">
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:string"/>
      <xsd:element name="Document" type="xsd:anyURI"/>
      <xsd:element name="Authority" type="xsd:anyURI"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="RangeOfValuesType" id="RangeOfValuesType">
    <xsd:sequence>
      <xsd:element name="MinValue" type="xsd:anyType" minOccurs="0"/>
      <xsd:element name="MaxValue" type="xsd:anyType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- cswGetRecords.xsd -->
  <xsd:element name="GetRecords" type="csw30:GetRecordsType" id="GetRecords"/>
  <xsd:complexType name="GetRecordsType" id="GetRecordsType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The principal means of searching the catalogue. The matching
        catalogue entries may be included with the response. The client may assign a requestId
        (absolute URI). A distributed search is performed if the DistributedSearch element is
        present and the catalogue is a member of a federation. Profiles may allow alternative query
        expressions. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence>
          <xsd:element name="DistributedSearch" type="csw30:DistributedSearchType" minOccurs="0"/>
          <xsd:element name="ResponseHandler" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:choice>
            <xsd:element ref="csw30:AbstractQuery"/>
            <xsd:any namespace="##other" processContents="strict"/>
          </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="requestId" type="xsd:anyURI" use="optional">
          <xsd:annotation>
            <xsd:documentation xml:lang="en"> requestId becomes mandatory in the case of a
              distributed search. Must be a unique Id (i.e. a UUID). </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="csw30:BasicRetrievalOptions"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:attributeGroup name="BasicRetrievalOptions" id="BasicRetrievalOptions">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Various attributes that specify basic retrieval options:
        outputFormat - the media type of the response message outputSchema - the preferred schema
        for records in the result set startPosition - requests a slice of the result set, starting
        at this position maxRecords - the maximum number of records to return. No records are
        returned if maxRecords=0. </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="outputFormat" type="xsd:string" use="optional" default="application/xml"/>
    <xsd:attribute name="outputSchema" type="xsd:anyURI" use="optional"/>
    <xsd:attribute name="startPosition" type="xsd:positiveInteger" use="optional" default="1"/>
    <xsd:attribute name="maxRecords" type="csw30:MaxRecordsType" use="optional" default="10"/>
  </xsd:attributeGroup>
  <xsd:simpleType name="MaxRecordsType">
    <xsd:union memberTypes="xsd:nonNegativeInteger csw30:UnlimitedStringType"/>
  </xsd:simpleType>
  <xsd:simpleType name="UnlimitedStringType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="unlimited"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="DistributedSearchType" id="DistributedSearchType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Governs the behaviour of a distributed search. hopCount -
        the maximum number of message hops before the search is terminated. Each catalogue node
        decrements this value when the request is received, and must not forward the request if
        hopCount=0. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="federatedCatalogues" type="csw30:FederatedCatalogueType" minOccurs="0"
        maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation xml:lang="en"> To restrict the number of catalogues of a federation
            which should be searched upon an optional list of those catalogues can be provided
            within the federatedCatatalogues parameter. </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="hopCount" type="xsd:positiveInteger" use="optional" default="2"/>
    <xsd:attribute name="clientId" type="xsd:anyURI" use="required">
      <xsd:annotation>
        <xsd:documentation> An Id which uniquely identifies the requestor. </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="distributedSearchId" type="xsd:anyURI" use="required">
      <xsd:annotation>
        <xsd:documentation> Id which uniquely identifies a complete client initiated distributed
          search sequence/session. </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="distributedSearchIdTimout" type="xsd:unsignedLong" use="optional"
      default="600">
      <xsd:annotation>
        <xsd:documentation> Defines how long (sec) the distributedSearchId should be valid, meaning
          how long a server involved in distributed search should minimally store information
          related to the distributedSearchId. </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="FederatedCatalogueType" id="FederatedCatalogueType">
    <xsd:attribute name="catalogueURL" type="xsd:anyURI" use="required"/>
    <xsd:attribute name="timeout" type="xsd:unsignedLong" use="optional">
      <xsd:annotation>
        <xsd:documentation> For every catalogue in this list an optional timeout definition (in
          msec) can be provided. </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="AbstractQuery" type="csw30:AbstractQueryType" abstract="true"
    id="AbstractQuery"/>
  <xsd:complexType name="AbstractQueryType" abstract="true" id="AbstractQueryType"/>
  <xsd:element name="Query" type="csw30:QueryType" substitutionGroup="csw30:AbstractQuery"
    id="Query"/>
  <xsd:complexType name="QueryType" id="QueryType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Specifies a query to execute against instances of one or
        more object types. A set of ElementName elements may be included to specify an adhoc view of
        the csw30:Record instances in the result set. Otherwise, use ElementSetName to specify a
        predefined view. The Constraint element contains a query filter expressed in a supported
        query language. A sorting criterion that specifies a property to sort by may be included.
        typeNames - a list of object types to query. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:AbstractQueryType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:element ref="csw30:ElementSetName"/>
            <xsd:element name="ElementName" type="xsd:string" maxOccurs="unbounded"/>
          </xsd:choice>
          <xsd:element ref="csw30:Constraint" minOccurs="0"/>
          <xsd:element ref="fes:SortBy" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="typeNames" type="csw30:TypeNameListType" use="required"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="TypeNameListType" id="TypeNameListType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The exact syntax is defined in an application profile. If
        querying against the common record properties, only a single type may be specified (Record).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:list itemType="xsd:QName"/>
  </xsd:simpleType>
  <xsd:element name="Constraint" type="csw30:QueryConstraintType" id="Constraint"/>
  <xsd:complexType name="QueryConstraintType" id="QueryConstraintType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> A search constraint that adheres to one of the following
        syntaxes: Filter - OGC filter expression CqlText - OGC CQL predicate </xsd:documentation>
    </xsd:annotation>
    <xsd:choice>
      <xsd:element ref="fes:Filter"/>
      <xsd:element name="CqlText" type="xsd:string"/>
    </xsd:choice>
    <xsd:attribute name="version" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Query language version</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="ElementSetName" type="csw30:ElementSetNameType" id="ElementSetName"/>
  <xsd:complexType name="ElementSetNameType" id="ElementSetNameType">
    <xsd:simpleContent>
      <xsd:extension base="csw30:ElementSetType">
        <xsd:attribute name="typeNames" type="csw30:TypeNameListType" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:simpleType name="RequiredElementSetNamesType" id="RequiredElementSetNamesType">
    <xsd:annotation>
      <xsd:documentation> Named subsets of catalogue object properties; these views are mapped to a
        specific information model and are defined in an application profile. </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="brief"/>
      <xsd:enumeration value="summary"/>
      <xsd:enumeration value="full"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ElementSetType">
    <xsd:union memberTypes="xsd:string csw30:RequiredElementSetNamesType"/>
  </xsd:simpleType>
  <xsd:element name="GetRecordsResponse" type="csw30:GetRecordsResponseType" id="GetRecordsResponse"/>
  <xsd:complexType name="GetRecordsResponseType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The response message for a GetRecords request. Some or all
        of the matching records may be included as children of the SearchResults element. The
        RequestId is only included if the client specified it. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0"/>
      <xsd:element name="SearchStatus" type="csw30:RequestStatusType"/>
      <xsd:element name="SearchResults" type="csw30:SearchResultsType"/>
    </xsd:sequence>
    <xsd:attribute name="version" type="xsd:string" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="RequestStatusType" id="RequestStatusType">
    <xsd:annotation>
      <xsd:documentation> This element provides information about the status of the search request.
        status - status of the search timestamp - the date and time when the result set was modified
        (ISO 8601 format: YYYY-MM-DDThh:mm:ss[+|-]hh:mm). </xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="timestamp" type="xsd:dateTime" use="optional"/>
  </xsd:complexType>
  <xsd:simpleType name="ResultsStatusType" id="ResultsStatusType">
    <xsd:annotation>
      <xsd:documentation> status of the items included in the resultset: complete (all items found
        are included), subset (subset of items found are included, but no further items in the
        requested range startPosition/maxRecords are available), processing (subset of items found
        are included, but server further processing to get the outstanding items in the requested
        range startPosition/maxRecords), none (no items are included). </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="subset"/>
      <xsd:enumeration value="complete"/>
      <xsd:enumeration value="processing"/>
      <xsd:enumeration value="none"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:complexType name="SearchResultsType" id="SearchResultsType">
    <xsd:annotation>
      <xsd:documentation> Includes representations of result set members if maxRecords &gt; 0.
        The items must conform to one of the csw30:Record views or a profile-specific
        representation. resultSetId - id of the result set (a URI). elementSet - The element set
        that has been returned (e.g., "brief", "summary", "full") recordSchema - schema reference
        for included records(URI) numberOfRecordsMatched - number of records matched by the query
        numberOfRecordsReturned - number of records returned to client nextRecord - position of next
        record in the result set (0 if no records remain). expires - the time instant when the
        result set expires and is discarded (ISO8601 format) elapsedTime - runtime information of
        the search within the federated catalogue </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:element ref="csw30:AbstractRecord" minOccurs="0" maxOccurs="unbounded"/>
        <xsd:any namespace="##other" processContents="strict" minOccurs="0" maxOccurs="unbounded"/>
      </xsd:choice>
      <xsd:element ref="csw30:FederatedSearchResultBase" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="resultSetId" type="xsd:anyURI" use="optional"/>
    <xsd:attribute name="elementSet" type="csw30:ElementSetType" use="optional"/>
    <xsd:attribute name="recordSchema" type="xsd:anyURI" use="optional"/>
    <xsd:attribute name="numberOfRecordsMatched" type="xsd:nonNegativeInteger" use="required"/>
    <xsd:attribute name="numberOfRecordsReturned" type="xsd:nonNegativeInteger" use="required"/>
    <xsd:attribute name="nextRecord" type="xsd:nonNegativeInteger" use="optional"/>
    <xsd:attribute name="expires" type="xsd:dateTime" use="optional"/>
    <xsd:attribute name="elapsedTime" type="xsd:unsignedLong" use="optional"/>
    <xsd:attribute name="status" type="csw30:ResultsStatusType" use="optional" default="subset"/>
  </xsd:complexType>
  <xsd:element name="FederatedSearchResultBase" type="csw30:FederatedSearchResultBaseType"
    abstract="true" id="FederatedSearchResultBase"/>
  <xsd:complexType name="FederatedSearchResultBaseType" abstract="true"
    id="FederatedSearchResultBaseType">
    <xsd:attribute name="catalogueURL" type="xsd:anyURI" use="required">
      <xsd:annotation>
        <xsd:documentation> The URL-prefix of the getCapabilities HTTP-GET operation of the
          catalogue. </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:element name="FederatedSearchResult" type="csw30:FederatedSearchResultType"
    substitutionGroup="csw30:FederatedSearchResultBase" id="FederatedSearchResult"/>
  <xsd:complexType name="FederatedSearchResultType" id="FederatedSearchResultType">
    <xsd:complexContent>
      <xsd:extension base="csw30:FederatedSearchResultBaseType">
        <xsd:sequence>
          <xsd:element name="searchResult" type="csw30:SearchResultsType"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="FederatedException" type="csw30:FederatedExceptionType"
    substitutionGroup="csw30:FederatedSearchResultBase" id="FederatedException"/>
  <xsd:complexType name="FederatedExceptionType" id="FederatedExceptionType">
    <xsd:complexContent>
      <xsd:extension base="csw30:FederatedSearchResultBaseType">
        <xsd:sequence>
          <xsd:element ref="ows:ExceptionReport" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- cswGetRecordById.xsd -->
  <xsd:element name="GetRecordById" type="csw30:GetRecordByIdType" id="GetRecordById"/>
  <xsd:complexType name="GetRecordByIdType" id="GetRecordByIdType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Convenience operation to retrieve default record
        representations by identifier. Id - object identifier (a URI) that provides a reference to a
        catalogue item (or a result set if the catalogue supports persistent result sets).
        ElementSetName - one of "brief, "summary", or "full" </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence>
          <xsd:element name="Id" type="xsd:anyURI"/>
          <xsd:element ref="csw30:ElementSetName" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="outputFormat" type="xsd:string" use="optional"
          default="application/xml"/>
        <xsd:attribute name="outputSchema" type="xsd:anyURI" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!-- cswTransaction.xsd -->
  <xsd:element name="Transaction" type="csw30:TransactionType" id="Transaction"/>
  <xsd:complexType name="TransactionType" id="TransactionType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Users may insert, update, or delete catalogue entries. If
        the verboseResponse attribute has the value "true", then one or more csw30:InsertResult
        elements must be included in the response. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence>
          <xsd:choice maxOccurs="unbounded">
            <xsd:element name="Insert" type="csw30:InsertType"/>
            <xsd:element name="Update" type="csw30:UpdateType"/>
            <xsd:element name="Delete" type="csw30:DeleteType"/>
          </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="verboseResponse" type="xsd:boolean" use="optional" default="false"/>
        <xsd:attribute name="requestId" type="xsd:anyURI" use="optional"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="InsertType" id="InsertType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Submits one or more records to the catalogue. The
        representation is defined by the application profile. The handle attribute may be included
        to specify a local identifier for the action (it must be unique within the context of the
        transaction). </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:any namespace="##other" processContents="strict" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="typeName" type="xsd:QName" use="optional"/>
    <xsd:attribute name="handle" type="xsd:ID" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="UpdateType" id="UpdateType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Update statements may replace an entire record or only
        update part of a record: 1) To replace an existing record, include a new instance of the
        record; 2) To update selected properties of an existing record, include a set of
        RecordProperty elements. The scope of the update statement is determined by the Constraint
        element. The 'handle' is a local identifier for the action. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:choice>
        <xsd:any namespace="##other" processContents="strict"/>
        <xsd:sequence>
          <xsd:element ref="csw30:RecordProperty" maxOccurs="unbounded"/>
          <xsd:element ref="csw30:Constraint"/>
        </xsd:sequence>
      </xsd:choice>
    </xsd:sequence>
    <xsd:attribute name="typeName" type="xsd:QName" use="optional"/>
    <xsd:attribute name="handle" type="xsd:ID" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="DeleteType" id="DeleteType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Deletes one or more catalogue items that satisfy some set of
        conditions. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="csw30:Constraint"/>
    </xsd:sequence>
    <xsd:attribute name="typeName" type="xsd:QName" use="optional"/>
    <xsd:attribute name="handle" type="xsd:ID" use="optional"/>
  </xsd:complexType>
  <xsd:element name="RecordProperty" type="csw30:RecordPropertyType">
    <xsd:annotation>
      <xsd:documentation> The RecordProperty element is used to specify the new value of a record
        property in an update statement. </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="RecordPropertyType">
    <xsd:sequence>
      <xsd:element name="Name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation> The Name element contains the name of a property to be updated. The
            name may be a path expression. </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="Value" type="xsd:anyType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation> The Value element contains the replacement value for the named
            property. </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="TransactionResponse" type="csw30:TransactionResponseType"
    id="TransactionResponse"/>
  <xsd:complexType name="TransactionResponseType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The response for a transaction request that was successfully
        completed. If the transaction failed for any reason, a service exception report indicating a
        TransactionFailure is returned instead. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="TransactionSummary" type="csw30:TransactionSummaryType"/>
      <xsd:element name="InsertResult" type="csw30:InsertResultType" minOccurs="0"
        maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="version" type="xsd:string" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="TransactionSummaryType" id="TransactionSummaryType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Reports the total number of catalogue items modified by a
        transaction request (i.e, inserted, updated, deleted). If the client did not specify a
        requestId, the server may assign one (a URI value). </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="totalInserted" type="xsd:nonNegativeInteger" minOccurs="0"/>
      <xsd:element name="totalUpdated" type="xsd:nonNegativeInteger" minOccurs="0"/>
      <xsd:element name="totalDeleted" type="xsd:nonNegativeInteger" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="requestId" type="xsd:anyURI" use="optional"/>
  </xsd:complexType>
  <xsd:complexType name="InsertResultType" id="InsertResultType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Returns a "brief" view of any newly created catalogue
        records. The handle attribute may reference a particular statement in the corresponding
        transaction request. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="csw30:BriefRecord" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="handleRef" type="xsd:anyURI" use="optional"/>
  </xsd:complexType>

  <!-- cswHarvest.xsd -->
  <xsd:element name="Harvest" type="csw30:HarvestType" id="Harvest"/>
  <xsd:complexType name="HarvestType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Requests that the catalogue attempt to harvest a resource
        from some network location identified by the source URL. Source - a URL from which the
        resource is retrieved ResourceType - normally a URI that specifies the type of the resource
        being harvested ResourceFormat - a media type indicating the format of the resource being
        harvested. The default is "application/xml". ResponseHandler - a reference to some endpoint
        to which the response shall be forwarded when the harvest operation has been completed
        HarvestInterval - an interval expressed using the ISO 8601 syntax; it specifies the interval
        between harvest attempts (e.g., P6M indicates an interval of six months).
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence>
          <xsd:element name="Source" type="xsd:anyURI"/>
          <xsd:element name="ResourceType" type="xsd:string"/>
          <xsd:element name="ResourceFormat" type="xsd:string" default="application/xml"
            minOccurs="0"/>
          <xsd:element name="HarvestInterval" type="xsd:duration" minOccurs="0"/>
          <xsd:element name="ResponseHandler" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded"
          />
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="HarvestResponse" type="csw30:HarvestResponseType" id="HarvestResponse">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The content of the response varies depending on the presence
        of the ResponseHandler element. If present, then the catalogue should verify the request and
        respond immediately with an csw30:Acknowledgement element in the response. The catalogue
        must then attempt to harvest the resource at some later time and send the response message
        to the location specified by the value of the ResponseHandler element using the indicated
        protocol (e.g. ftp, mailto, http). If the ResponseHandler element is absent, then the
        catalogue must attempt to harvest the resource immediately and include a TransactionResponse
        element in the response. In any case, if the harvest attempt is successful the response
        shall include summary representations of the newly created catalogue item(s).
      </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="HarvestResponseType" id="HarvestResponseType">
    <xsd:choice>
      <xsd:element ref="csw30:Acknowledgement"/>
      <xsd:element ref="csw30:TransactionResponse"/>
    </xsd:choice>
  </xsd:complexType>

  <!-- cswUnHarvest.xsd -->
  <xsd:element name="Source" type="csw30:SourceType" id="SourceType"/>
  <xsd:complexType name="SourceType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:anyURI">
        <xsd:attribute name="resourceType" type="xsd:anyURI" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:element name="UnHarvest" type="csw30:UnHarvestType" id="UnHarvest"/>
  <xsd:complexType name="UnHarvestType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> Requests that the CSW unharvest a resource from the
        catalogue. The resource to unharvest is identified by its source URL (which must match
        exactly) and its resource type. Source - URL of the resourse to unharvest (must match
        exactly; including case) ResourceType - normally a URI that specifies the type of the
        resource being unharvested. ResponseHandler - a reference to some endpoint to which the
        response shall be forwarded when the unharvest operation has been completed
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:RequestBaseType">
        <xsd:sequence>
          <xsd:element ref="csw30:Source" maxOccurs="unbounded"/>
          <xsd:element name="ResponseHandler" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded"
          />
        </xsd:sequence>
        <xsd:attribute name="outputFormat" type="xsd:string" default="text/xml"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="UnHarvestResponse" type="csw30:UnHarvestResponseType" id="UnHarvestResponse">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> The response to an UnHarvest request is simply a list of
        csw30:Source elements echoing what has been unharvested. </xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  <xsd:complexType name="UnHarvestResponseType" id="UnHarvestResponseType">
    <xsd:sequence>
      <xsd:element ref="csw30:Source" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <!-- record.xsd -->
  <xsd:element name="AbstractRecord" type="csw30:AbstractRecordType" abstract="true"
    id="AbstractRecord"/>
  <xsd:complexType name="AbstractRecordType" abstract="true" id="AbstractRecordType">
    <xsd:attribute name="deleted" type="xsd:boolean" use="optional" default="false"/>
  </xsd:complexType>
  <xsd:element name="DCMIRecord" type="csw30:DCMIRecordType"
    substitutionGroup="csw30:AbstractRecord"/>
  <xsd:complexType name="DCMIRecordType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> This type encapsulates all of the standard DCMI metadata
        terms, including the Dublin Core refinements; these terms may be mapped to the
        profile-specific information model. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:AbstractRecordType">
        <xsd:sequence>
          <xsd:group ref="dct:DCMI-terms"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="TemporalExtentType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> A type for specifying the temporal extent of the data item
        that a metadata record describes. Omitting begin/end implies infinity in that direction. The
        attribute "inclusive" can be used indicate whether the boundary value in included in extent
        or not. </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="begin" minOccurs="0">
        <xsd:complexType>
          <xsd:simpleContent>
            <xsd:extension base="xsd:dateTime">
              <xsd:attribute name="inclusive" type="xsd:boolean" default="true"/>
            </xsd:extension>
          </xsd:simpleContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="end" minOccurs="0">
        <xsd:complexType>
          <xsd:simpleContent>
            <xsd:extension base="xsd:dateTime">
              <xsd:attribute name="inclusive" type="xsd:boolean" default="true"/>
            </xsd:extension>
          </xsd:simpleContent>
        </xsd:complexType>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="BriefRecord" type="csw30:BriefRecordType"
    substitutionGroup="csw30:AbstractRecord"/>
  <xsd:complexType name="BriefRecordType" final="#all">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> This type defines a brief representation of the common
        record format. It extends AbstractRecordType to include only the dc:identifier and dc:type
        properties. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:AbstractRecordType">
        <xsd:sequence>
          <xsd:element ref="dc:identifier" maxOccurs="unbounded"/>
          <xsd:element ref="dc:title" maxOccurs="unbounded"/>
          <xsd:element ref="dc:type" minOccurs="0"/>
          <xsd:element ref="ows:BoundingBox" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SummaryRecord" type="csw30:SummaryRecordType"
    substitutionGroup="csw30:AbstractRecord"/>
  <xsd:complexType name="SummaryRecordType" final="#all">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> This type defines a summary representation of the common
        record format. It extends AbstractRecordType to include the core properties.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:AbstractRecordType">
        <xsd:sequence>
          <xsd:element ref="dc:identifier" maxOccurs="unbounded"/>
          <xsd:element ref="dc:title" maxOccurs="unbounded"/>
          <xsd:element ref="dc:type" minOccurs="0"/>
          <xsd:element ref="dc:subject" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="dc:format" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="dc:relation" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="dct:modified" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="dct:abstract" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="dct:spatial" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="ows:BoundingBox" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element name="TemporalExtent" type="csw30:TemporalExtentType" minOccurs="0"
            maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="Record" type="csw30:RecordType" substitutionGroup="csw30:AbstractRecord"/>
  <xsd:complexType name="RecordType" final="#all">
    <xsd:annotation>
      <xsd:documentation xml:lang="en"> This type extends DCMIRecordType to add ows:BoundingBox; it
        may be used to specify a spatial envelope for the catalogued resource. </xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="csw30:DCMIRecordType">
        <xsd:sequence>
          <xsd:element name="AnyText" type="csw30:EmptyType" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element ref="ows:BoundingBox" minOccurs="0" maxOccurs="unbounded"/>
          <xsd:element name="TemporalExtent" type="csw30:TemporalExtentType" minOccurs="0"
            maxOccurs="unbounded"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EmptyType"/>
</xsd:schema>
